generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ðŸ”¹ User Model - Includes Social & Habit Preferences
model User {
  user_id              Int       @id @default(autoincrement())
  user_email           String    @unique
  user_name            String
  avatar               String?
  points_gained        Int
  password             String
  gender               String? // Made optional to be more inclusive
  timezone             String    @default("UTC")
  prefersNotifications Boolean   @default(true)
  theme_preference     String    @default("auto") // "light", "dark", "auto"
  language             String    @default("en")
  premium_status       Boolean   @default(false)
  premium_until        DateTime?

  // Vacation Mode
  onVacation     Boolean   @default(false)
  vacation_start DateTime?
  vacation_end   DateTime?

  // Habit Goals
  dailyGoal   Int @default(3)
  weeklyGoal  Int @default(15)
  monthlyGoal Int @default(60) // Added monthly goal

  // Social & Activity Relationships
  sentFriendRequests     FriendRequest[] @relation("SentRequests")
  receivedFriendRequests FriendRequest[] @relation("ReceivedRequests")
  blogs                  Blog[]
  likes                  Like[]
  comments               Comment[] // Added comments relationship

  // Chat relationships
  sentMessages       Message[]         @relation("SentMessages")
  chatParticipations ChatParticipant[] // Chats the user is part of
  readReceipts       ReadReceipt[] // Messages the user has read
  createdChatRooms   ChatRoom[]        @relation("CreatedChatRooms") // For group chats created by this user

  // Habit Tracking Relationships
  habits         Habit[]
  habitLogs      HabitLog[]
  habitStreaks   HabitStreak[]
  habitReminders HabitReminder[]
  achievements   UserAchievement[] // Added achievements relationship
  challenges     UserChallenge[] // Added challenges relationship

  // Timestamps
  registeredAt DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  lastActive   DateTime @default(now()) // Added last active timestamp

  // Stats (for quick access without calculating)
  totalHabitsCreated   Int @default(0)
  totalHabitsCompleted Int @default(0)
  currentDailyStreak   Int @default(0)
  longestDailyStreak   Int @default(0)

  @@index([user_email]) // Index for faster queries
}

// ðŸ”¹ Friend Request - For Social Connection Features
model FriendRequest {
  request_id  Int           @id @default(autoincrement())
  sender_id   Int
  receiver_id Int
  status      RequestStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt // Added updatedAt field

  // Relationships - renamed to make more sense
  sender   User @relation(fields: [sender_id], references: [user_id], name: "SentRequests", onDelete: Cascade)
  receiver User @relation(fields: [receiver_id], references: [user_id], name: "ReceivedRequests", onDelete: Cascade)

  @@unique([sender_id, receiver_id]) // Prevent duplicate friend requests
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

// ðŸ”¹ Chat Room - For Both Direct Messages and Group Chats
model ChatRoom {
  room_id     Int          @id @default(autoincrement())
  type        ChatRoomType @default(DM) // 'DM' for direct messages, 'GROUP' for group chats
  name        String? // Optional for group chats, null for DMs
  description String? // Optional description for group chats
  avatar      String? // Group chat avatar
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Only used for group chats
  created_by_id Int? // Creator of the group (null for system-created DMs)
  is_private    Boolean @default(false) // Whether the group is invite-only

  // Relationships
  creator      User?             @relation("CreatedChatRooms", fields: [created_by_id], references: [user_id], onDelete: SetNull)
  messages     Message[] // Chat messages in this room
  participants ChatParticipant[] // Users in this chat room

  @@index([type]) // Index for faster querying by type
}

enum ChatRoomType {
  DM // Direct message between two users
  GROUP // Group chat with multiple participants
}

// ðŸ”¹ Chat Participant - Maps Users to Chat Rooms
model ChatParticipant {
  user_id  Int
  room_id  Int
  joinedAt DateTime  @default(now())
  isAdmin  Boolean   @default(false) // For group chat admin privileges
  nickname String? // Optional custom nickname in this chat
  muted    Boolean   @default(false) // Whether the user has muted this chat
  lastRead DateTime? // Last time the user read messages in this chat

  // Relationships
  user User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  room ChatRoom @relation(fields: [room_id], references: [room_id], onDelete: Cascade)

  @@id([user_id, room_id]) // Composite primary key
  @@index([user_id]) // Index for faster queries
  @@index([room_id])
}

// ðŸ”¹ Message - For Chat Functionality
model Message {
  message_id   Int         @id @default(autoincrement())
  room_id      Int // The chat room this message belongs to
  sender_id    Int // User who sent the message
  content      String // Message content
  message_type MessageType @default(TEXT) // Type of message
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Message delivery status tracking
  delivered_at DateTime? // When the message was delivered to recipients
  read_at      DateTime? // When the message was read by recipient (for DMs)

  // Additional fields for media messages
  media_url      String? // URL to image/video/file
  media_type     String? // MIME type of media
  media_size     Int? // Size in bytes
  media_width    Int? // For images/videos
  media_height   Int? // For images/videos
  media_duration Int? // For audio/video in seconds

  // Reply functionality
  reply_to_id Int? // ID of message being replied to

  // Relationships
  sender       User          @relation("SentMessages", fields: [sender_id], references: [user_id], onDelete: Cascade)
  room         ChatRoom      @relation(fields: [room_id], references: [room_id], onDelete: Cascade)
  reply_to     Message?      @relation("MessageReplies", fields: [reply_to_id], references: [message_id], onDelete: SetNull)
  replies      Message[]     @relation("MessageReplies")
  readReceipts ReadReceipt[] // Track who has read this message in group chats

  @@index([room_id, createdAt]) // Index for faster message retrieval
  @@index([sender_id])
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  FILE
  AUDIO
  LOCATION
  CONTACT
  SYSTEM // For system messages like "User X joined the group"
  HABIT // For sharing habit information
  CHALLENGE // For sharing challenge information
}

// ðŸ”¹ Read Receipt - For tracking message reads in group chats
model ReadReceipt {
  message_id Int
  user_id    Int
  read_at    DateTime @default(now())

  // Relationships
  message Message @relation(fields: [message_id], references: [message_id], onDelete: Cascade)
  user    User    @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@id([message_id, user_id]) // Composite primary key
}

// ðŸ”¹ Habit Model - Core Model for Habit Tracking
model Habit {
  habit_id    Int       @id @default(autoincrement())
  user_id     Int
  name        String
  description String?
  start_date  DateTime
  end_date    DateTime?
  is_active   Boolean   @default(true)
  is_favorite Boolean   @default(false)
  is_public   Boolean   @default(false) // Added public flag for social sharing
  icon        String?
  color       String?
  image       String?

  // Frequency & Tracking
  frequency_type     FrequencyType @default(DAILY) // Added enum for frequency type
  frequency_value    Int // Number of times to complete
  frequency_interval Int // Over what period
  custom_frequency   Json? // For complex scheduling patterns
  specific_days      Int[] // Store days of week (0-6) for weekly habits

  // Habit Type
  tracking_type TrackingType @default(BOOLEAN)
  duration_goal Int? // For timed habits (minutes)
  count_goal    Int? // For countable habits
  numeric_goal  Float? // For measurable habits
  units         String? // Units for measurement

  // Smart Features
  skip_on_vacation     Boolean @default(false)
  require_evidence     Boolean @default(false)
  require_verification Boolean @default(false)
  location_based       Boolean @default(false) // Added location-based tracking
  location_name        String? // Optional location name
  location_lat         Float? // Optional latitude
  location_lng         Float? // Optional longitude
  location_radius      Int? // Optional radius in meters

  // Motivation
  motivation_quote      String?
  external_resource_url String?

  // Tags & Categories
  tags Json? // Array of tags as JSON (e.g., ["health", "morning"])

  // Cues & Rewards (for habit building psychology)
  cue        String? // What triggers this habit
  reward     String? // What reward comes after completion
  difficulty DifficultyLevel @default(MEDIUM) // Added difficulty level

  // Related Records
  habitLogs  HabitLog[]
  streak     HabitStreak[]
  reminders  HabitReminder[]
  challenges HabitChallenge[] // Added challenges relationship

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Domain relationship
  domain_id Int
  domain    HabitDomain @relation(fields: [domain_id], references: [domain_id])

  // User relationship
  user User @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([user_id]) // Index for faster queries
  @@index([domain_id])
}

enum FrequencyType {
  DAILY // Every day
  WEEKLY // Specific days of week
  MONTHLY // Specific days of month
  INTERVAL // Every X days
  X_TIMES // X times per period (week/month)
}

enum DifficultyLevel {
  VERY_EASY
  EASY
  MEDIUM
  HARD
  VERY_HARD
}

// ðŸ”¹ Habit Log - Tracks Each Completion of a Habit
model HabitLog {
  log_id           Int      @id @default(autoincrement())
  habit_id         Int
  user_id          Int
  completed        Boolean  @default(true)
  completion_notes String?
  completed_at     DateTime @default(now())
  skipped          Boolean  @default(false) // Added skipped flag
  mood             Int? // Optional mood rating (1-5)

  // For tracked habits
  duration_completed Int? // For duration habits
  count_completed    Int? // For count habits
  numeric_completed  Float? // For numeric habits

  // Evidence
  evidence_image      String? // URL to evidence image
  verified_by_user_id Int? // ID of user who verified completion

  // Relationships
  habit Habit @relation(fields: [habit_id], references: [habit_id], onDelete: Cascade)
  user  User  @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([habit_id, completed_at]) // Index for faster streak calculations
  @@index([user_id, completed_at])
}

// ðŸ”¹ Habit Domain - Categories for organizing habits
model HabitDomain {
  domain_id   Int      @id @default(autoincrement())
  name        String
  description String?
  icon        String?
  color       String   @default("#4285F4")
  sortOrder   Int      @default(0)
  is_default  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  habits Habit[]
}

// ðŸ”¹ Habit Streak - Tracks Consistency of Habit Completion
model HabitStreak {
  streak_id      Int       @id @default(autoincrement())
  habit_id       Int
  user_id        Int
  current_streak Int       @default(0)
  longest_streak Int       @default(0)
  last_completed DateTime?

  // Added fields for streak history
  start_date     DateTime? // When current streak started
  streak_history Json? // History of all streaks for visualization

  // Relationships
  habit Habit @relation(fields: [habit_id], references: [habit_id], onDelete: Cascade)
  user  User  @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([habit_id])
  @@index([user_id])
}

// ðŸ”¹ Habit Reminder - For Notification System
model HabitReminder {
  reminder_id          Int            @id @default(autoincrement())
  habit_id             Int
  user_id              Int
  reminder_time        DateTime
  repeat               ReminderRepeat @default(DAILY) // Changed to enum
  notification_message String?
  is_enabled           Boolean        @default(true) // Added enabled flag
  smart_reminder       Boolean        @default(false) // Added smart reminder flag
  snooze_count         Int            @default(0) // Track how many times reminders are snoozed

  // Relationships
  habit Habit @relation(fields: [habit_id], references: [habit_id], onDelete: Cascade)
  user  User  @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

enum ReminderRepeat {
  ONCE
  DAILY
  WEEKDAYS
  WEEKENDS
  WEEKLY
  MONTHLY
  CUSTOM
}

// ðŸ”¹ Tracking Type - Enum for Different Habit Tracking Methods
enum TrackingType {
  BOOLEAN
  DURATION
  COUNT
  NUMERIC
}

// ðŸ”¹ Achievement - For Gamification
model Achievement {
  achievement_id Int             @id @default(autoincrement())
  name           String
  description    String
  icon           String
  badge_image    String?
  criteria_type  AchievementType
  criteria_value Int // Value needed to unlock (e.g. 7 for 7-day streak)
  xp_value       Int             @default(0) // Experience points for gamification
  is_hidden      Boolean         @default(false) // Some achievements can be surprises

  // Relationships
  userAchievements UserAchievement[]
}

// User-Achievement join table
model UserAchievement {
  user_id        Int
  achievement_id Int
  unlocked_at    DateTime @default(now())

  // Relationships
  user        User        @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievement_id], references: [achievement_id], onDelete: Cascade)

  @@id([user_id, achievement_id]) // Composite primary key
}

enum AchievementType {
  STREAK_LENGTH
  TOTAL_COMPLETIONS
  CONSECUTIVE_DAYS
  PERFECT_WEEK
  PERFECT_MONTH
  HABIT_DIVERSITY
  DOMAIN_MASTERY
  SOCIAL_ENGAGEMENT
}

// ðŸ”¹ Challenge - For Social Challenges
model Challenge {
  challenge_id Int      @id @default(autoincrement())
  name         String
  description  String
  start_date   DateTime
  end_date     DateTime
  created_by   Int // User who created the challenge
  is_public    Boolean  @default(false)
  image        String?

  // Relationships
  habitChallenges HabitChallenge[] // Which habits are part of this challenge
  userChallenges  UserChallenge[] // Which users joined this challenge
}

// Challenge-Habit join table
model HabitChallenge {
  challenge_id Int
  habit_id     Int

  // Relationships
  challenge Challenge @relation(fields: [challenge_id], references: [challenge_id], onDelete: Cascade)
  habit     Habit     @relation(fields: [habit_id], references: [habit_id], onDelete: Cascade)

  @@id([challenge_id, habit_id]) // Composite primary key
}

// User-Challenge join table
model UserChallenge {
  user_id      Int
  challenge_id Int
  joined_at    DateTime @default(now())
  progress     Float    @default(0) // Percentage of completion
  completed    Boolean  @default(false)

  // Relationships
  user      User      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  challenge Challenge @relation(fields: [challenge_id], references: [challenge_id], onDelete: Cascade)

  @@id([user_id, challenge_id]) // Composite primary key
}

// ðŸ”¹ Blog - For Social Sharing and Progress Updates
model Blog {
  blog_id     Int      @id @default(autoincrement())
  user_id     Int
  category_id Int
  title       String
  content     String
  image       String?
  is_featured Boolean  @default(false) // Added featured flag for highlighting quality content
  view_count  Int      @default(0) // Track popularity
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt // Added updatedAt field

  // Relationships
  user     User      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  category Category  @relation(fields: [category_id], references: [category_id])
  likes    Like[]
  comments Comment[] // Added comments relationship

  @@index([user_id, createdAt]) // Index for faster timeline queries
}

// ðŸ”¹ Category Model - For Organizing Blog Posts
model Category {
  category_id   Int     @id @default(autoincrement())
  category_name String
  icon          String?
  color         String?
  sortOrder     Int     @default(0) // Added sort order for UI

  // Relationships
  blogs Blog[]
}

// ðŸ”¹ Like - For Social Engagement with Blogs
model Like {
  like_id   Int      @id @default(autoincrement())
  user_id   Int
  blog_id   Int
  createdAt DateTime @default(now())

  // Relationships
  user User @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  blog Blog @relation(fields: [blog_id], references: [blog_id], onDelete: Cascade)

  @@unique([user_id, blog_id]) // Prevent duplicate likes
}

// ðŸ”¹ Comment - For Social Interaction on Blogs
model Comment {
  comment_id Int      @id @default(autoincrement())
  user_id    Int
  blog_id    Int
  content    String
  parent_id  Int? // For nested comments/replies
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relationships
  user    User      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  blog    Blog      @relation(fields: [blog_id], references: [blog_id], onDelete: Cascade)
  parent  Comment?  @relation("CommentReplies", fields: [parent_id], references: [comment_id], onDelete: SetNull)
  replies Comment[] @relation("CommentReplies")
}

// ðŸ”¹ Notification - For System Notifications
model Notification {
  notification_id Int              @id @default(autoincrement())
  user_id         Int
  title           String
  content         String
  type            NotificationType
  is_read         Boolean          @default(false)
  createdAt       DateTime         @default(now())
  readAt          DateTime?
  action_url      String? // Optional URL to navigate to when clicked

  // Relationships are handled through the type and related_id fields
  related_id Int? // ID of related entity (habit_id, challenge_id, etc.)
}

enum NotificationType {
  STREAK_MILESTONE
  ACHIEVEMENT_UNLOCKED
  FRIEND_REQUEST
  CHALLENGE_INVITE
  REMINDER
  SYSTEM_MESSAGE
  BLOG_COMMENT
  NEW_MESSAGE
  GROUP_INVITATION
}

// ðŸ”¹ UserStats - For Analytics Dashboard
model UserStats {
  stat_id Int      @id @default(autoincrement())
  user_id Int      @unique
  date    DateTime @default(now())

  // Daily stats
  total_habits_completed Int     @default(0)
  total_duration_tracked Int     @default(0) // In minutes
  streak_maintained      Boolean @default(false)

  // Weekly/Monthly aggregates can be calculated from daily stats
}
