// HabitPulse - Complete Prisma Schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ðŸ”¹ User Model - Includes Social & Habit Preferences
model User {
  user_id              Int       @id @default(autoincrement())
  user_email           String    @unique
  user_name            String
  avatar               String?
  points_gained        Int       @default(0)
  password             String
  gender               String? // Made optional to be more inclusive
  timezone             String    @default("UTC")
  prefersNotifications Boolean   @default(true)
  theme_preference     String    @default("auto") // "light", "dark", "auto"
  language             String    @default("en")
  premium_status       Boolean   @default(false)
  premium_until        DateTime?
  pushTokens           String[]

  // Vacation Mode
  onVacation     Boolean   @default(false)
  vacation_start DateTime?
  vacation_end   DateTime?

  // Habit Goals
  dailyGoal   Int @default(3)
  weeklyGoal  Int @default(15)
  monthlyGoal Int @default(60)

  // Password reset fields - Previous implementation
  resetPasswordToken  String?
  resetPasswordExpiry DateTime?

  // New OTP fields
  resetOTP       String? // Stores the OTP code (hashed)
  resetOTPExpiry DateTime? // When the OTP expires
  otpAttempts    Int       @default(0) // Count failed attempts
  otpLastSent    DateTime? // Rate limiting for OTP requests

  // Social & Activity Relationships
  sentFriendRequests     FriendRequest[] @relation("SentRequests")
  receivedFriendRequests FriendRequest[] @relation("ReceivedRequests")
  blogs                  Blog[]
  likes                  Like[]
  comments               Comment[]

  // Chat relationships
  sentMessages       Message[]         @relation("SentMessages")
  chatParticipations ChatParticipant[]
  readReceipts       ReadReceipt[]
  createdChatRooms   ChatRoom[]        @relation("CreatedChatRooms")

  // Habit Tracking Relationships
  habits              Habit[]
  habitLogs           HabitLog[]
  habitStreaks        HabitStreak[]
  habitReminders      HabitReminder[]
  habitResets         HabitReset[]
  achievements        UserAchievement[]
  achievementProgress AchievementProgress[]
  dailyStatuses       HabitDailyStatus[]

  // Reminder System Relationships
  scheduledReminders      ScheduledReminder[]
  devices                 UserDevice[]
  notificationPreferences UserNotificationPreference[]

  // Challenge System
  challengesCreated Challenge[]            @relation("ChallengeCreator")
  challengesJoined  ChallengeParticipant[]

  // Points System
  pointsLogs PointsLog[]

  // Stats
  userStats UserStats?

  // Notifications
  notifications Notification[]

  // Timestamps
  registeredAt DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  lastActive   DateTime @default(now())

  // Stats (for quick access without calculating)
  totalHabitsCreated   Int @default(0)
  totalHabitsCompleted Int @default(0)
  currentDailyStreak   Int @default(0)
  longestDailyStreak   Int @default(0)

  @@index([user_email])
  @@index([points_gained]) // Add index for leaderboard queries
}

// ðŸ”¹ Points Log - For Tracking User Points History
model PointsLog {
  log_id      Int              @id @default(autoincrement())
  user_id     Int
  points      Int // Can be positive or negative
  reason      String
  description String?
  source_type PointsSourceType
  source_id   Int? // ID of the related entity (habit_id, achievement_id, etc.)
  createdAt   DateTime         @default(now())

  // Relationships
  user User @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([user_id, createdAt])
  @@index([source_type, source_id])
  @@index([createdAt]) // For time-based queries (weekly/monthly reports)
}

enum PointsSourceType {
  HABIT_COMPLETION
  STREAK_MILESTONE
  ACHIEVEMENT
  CHALLENGE
  SOCIAL_ACTIVITY
  SYSTEM_BONUS
  ADMIN_ADJUSTMENT
  SYSTEM_DEDUCTION
}

// ðŸ”¹ ScheduledReminder - For Individual Reminder Instances
model ScheduledReminder {
  scheduled_reminder_id Int       @id @default(autoincrement())
  habit_id              Int
  user_id               Int
  scheduled_time        DateTime
  reminder_type         String // 'PRIMARY', 'PRE_NOTIFICATION', 'FOLLOW_UP'
  message               String
  is_sent               Boolean   @default(false)
  is_prepared           Boolean   @default(false)
  actual_send_time      DateTime?
  send_status           String? // 'SENT', 'FAILED', 'SKIPPED_COMPLETED', 'DISMISSED_BY_USER'
  failure_reason        String?
  reminder_config_id    Int? // References the HabitReminder that generated this
  metadata              Json? // Additional data like habit color, icon, etc.
  createdAt             DateTime  @default(now())
  notification_id       Int?

  // Relationships
  habit          Habit          @relation(fields: [habit_id], references: [habit_id], onDelete: Cascade)
  user           User           @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  reminderConfig HabitReminder? @relation(fields: [reminder_config_id], references: [reminder_id], onDelete: SetNull)

  @@index([habit_id])
  @@index([user_id])
  @@index([scheduled_time])
  @@index([is_sent, scheduled_time])
}

// For push notifications
model UserDevice {
  device_id      Int       @id @default(autoincrement())
  user_id        Int
  device_type    String // 'IOS', 'ANDROID', 'WEB'
  token          String    @unique
  is_active      Boolean   @default(true)
  last_active    DateTime  @default(now())
  last_failure   DateTime?
  failure_reason String?
  app_version    String?
  os_version     String?
  device_name    String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relationship
  user User @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@index([token])
}

// ðŸ”¹ User Notification Preferences
model UserNotificationPreference {
  preference_id Int      @id @default(autoincrement())
  user_id       Int
  type          String
  channel       String?
  enabled       Boolean  @default(true)
  settings      Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationship
  user User @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([user_id, type, channel])
}

// ðŸ”¹ Friend Request - For Social Connection Features
model FriendRequest {
  request_id  Int           @id @default(autoincrement())
  sender_id   Int
  receiver_id Int
  status      RequestStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  sender   User @relation(fields: [sender_id], references: [user_id], name: "SentRequests", onDelete: Cascade)
  receiver User @relation(fields: [receiver_id], references: [user_id], name: "ReceivedRequests", onDelete: Cascade)

  @@unique([sender_id, receiver_id])
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

// ðŸ”¹ Chat Room - For Both Direct Messages and Group Chats
model ChatRoom {
  room_id     Int          @id @default(autoincrement())
  type        ChatRoomType @default(DM)
  name        String?
  description String?
  avatar      String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  created_by_id Int?
  is_private    Boolean @default(false)

  creator      User?             @relation("CreatedChatRooms", fields: [created_by_id], references: [user_id], onDelete: SetNull)
  messages     Message[]
  participants ChatParticipant[]

  @@index([type])
}

enum ChatRoomType {
  DM
  GROUP
}

// ðŸ”¹ Chat Participant - Maps Users to Chat Rooms
model ChatParticipant {
  user_id  Int
  room_id  Int
  joinedAt DateTime  @default(now())
  isAdmin  Boolean   @default(false)
  nickname String?
  muted    Boolean   @default(false)
  lastRead DateTime?

  user User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  room ChatRoom @relation(fields: [room_id], references: [room_id], onDelete: Cascade)

  @@id([user_id, room_id])
  @@index([user_id])
  @@index([room_id])
}

// ðŸ”¹ Message - For Chat Functionality
model Message {
  message_id   Int         @id @default(autoincrement())
  room_id      Int
  sender_id    Int
  content      String
  message_type MessageType @default(TEXT)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  delivered_at DateTime?
  read_at      DateTime?

  media_url      String?
  media_type     String?
  media_size     Int?
  media_width    Int?
  media_height   Int?
  media_duration Int?

  reply_to_id Int?

  sender       User          @relation("SentMessages", fields: [sender_id], references: [user_id], onDelete: Cascade)
  room         ChatRoom      @relation(fields: [room_id], references: [room_id], onDelete: Cascade)
  reply_to     Message?      @relation("MessageReplies", fields: [reply_to_id], references: [message_id], onDelete: SetNull)
  replies      Message[]     @relation("MessageReplies")
  readReceipts ReadReceipt[]

  @@index([room_id, createdAt])
  @@index([sender_id])
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  FILE
  AUDIO
  LOCATION
  CONTACT
  SYSTEM
  HABIT
  CHALLENGE
}

// ðŸ”¹ Read Receipt - For tracking message reads in group chats
model ReadReceipt {
  message_id Int
  user_id    Int
  read_at    DateTime @default(now())

  message Message @relation(fields: [message_id], references: [message_id], onDelete: Cascade)
  user    User    @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@id([message_id, user_id])
}

// ðŸ”¹ Habit Model - Core Model for Habit Tracking
model Habit {
  habit_id    Int       @id @default(autoincrement())
  user_id     Int
  name        String
  description String?
  start_date  DateTime
  end_date    DateTime?
  is_active   Boolean   @default(true)
  is_favorite Boolean   @default(false)
  icon        String?
  color       String?
  image       String?

  // Frequency & Tracking
  frequency_type     FrequencyType @default(DAILY)
  frequency_value    Int // Number of times to complete
  frequency_interval Int // Over what period
  custom_frequency   Json? // For complex scheduling patterns
  specific_days      Int[] // Store days of week (0-6) for weekly habits

  // Habit Type
  tracking_type TrackingType @default(BOOLEAN)
  duration_goal Int? // For timed habits (minutes)
  count_goal    Int? // For countable habits
  numeric_goal  Float? // For measurable habits
  units         String? // Units for measurement

  // Smart Features
  skip_on_vacation     Boolean @default(false)
  require_evidence     Boolean @default(false)
  require_verification Boolean @default(false)
  location_based       Boolean @default(false)
  location_name        String?
  location_lat         Float?
  location_lng         Float?
  location_radius      Int?

  // Grace Period settings
  grace_period_enabled Boolean @default(true)
  grace_period_hours   Int     @default(24) // Hours of grace period allowed

  // Motivation
  motivation_quote      String?
  external_resource_url String?

  // Tags & Categories
  tags Json? // Array of tags as JSON

  // Cues & Rewards (for habit building psychology)
  cue        String? // What triggers this habit
  reward     String? // What reward comes after completion
  difficulty DifficultyLevel @default(MEDIUM)

  // Points Configuration
  points_per_completion Int @default(5)
  bonus_points_streak   Int @default(1) // Additional points per streak day

  // Related Records
  habitLogs          HabitLog[]
  streak             HabitStreak[]
  reminders          HabitReminder[]
  resets             HabitReset[]
  dailyStatuses      HabitDailyStatus[]
  scheduledReminders ScheduledReminder[]
  habitChallenges    HabitChallenge[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Domain relationship
  domain_id Int
  domain    HabitDomain @relation(fields: [domain_id], references: [domain_id])

  // User relationship
  user User @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@index([domain_id])
}

enum FrequencyType {
  DAILY // Every day
  WEEKDAYS // Monday-Friday only
  WEEKENDS // Saturday-Sunday only
  SPECIFIC_DAYS // User-selected days of week
  INTERVAL // Every X days
  X_TIMES_WEEK // X times per week (any days)
  X_TIMES_MONTH // X times per month (any days)
}

enum DifficultyLevel {
  VERY_EASY
  EASY
  MEDIUM
  HARD
  VERY_HARD
}

// ðŸ”¹ Habit Log - Tracks Each Completion of a Habit
model HabitLog {
  log_id           Int      @id @default(autoincrement())
  habit_id         Int
  user_id          Int
  completed        Boolean  @default(true)
  completion_notes String?
  completed_at     DateTime @default(now())
  skipped          Boolean  @default(false)
  mood             Int? // Optional mood rating (1-5)

  // New fields
  auto_logged   Boolean @default(false) // Whether system generated this log (missed habits)
  logged_late   Boolean @default(false) // Whether logged after scheduled time
  skip_reason   String? // Reason provided when user skips habit
  points_earned Int     @default(0) // Track points earned for this completion

  // For tracked habits
  duration_completed Int? // For duration habits
  count_completed    Int? // For count habits
  numeric_completed  Float? // For numeric habits

  // Evidence
  evidence_image      String? // URL to evidence image
  verified_by_user_id Int? // ID of user who verified completion

  // Relationships
  habit Habit @relation(fields: [habit_id], references: [habit_id], onDelete: Cascade)
  user  User  @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([habit_id, completed_at])
  @@index([user_id, completed_at])
}

// ðŸ”¹ Habit Domain - Categories for organizing habits
model HabitDomain {
  domain_id   Int      @id @default(autoincrement())
  name        String
  description String?
  icon        String?
  color       String   @default("#4285F4")
  sortOrder   Int      @default(0)
  is_default  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  habits Habit[]
}

// ðŸ”¹ Habit Streak - Tracks Consistency of Habit Completion
model HabitStreak {
  streak_id      Int       @id @default(autoincrement())
  habit_id       Int
  user_id        Int
  current_streak Int       @default(0)
  longest_streak Int       @default(0)
  last_completed DateTime?

  // Enhanced fields for streak management
  start_date        DateTime? // When current streak started
  streak_history    Json? // History of all streaks for visualization
  missed_days_count Int       @default(0) // Track consecutive missed days
  last_reset_reason String? // Why streak was last reset
  grace_period_used Boolean   @default(false) // Whether grace period was used in current streak

  // Relationships
  habit Habit @relation(fields: [habit_id], references: [habit_id], onDelete: Cascade)
  user  User  @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([habit_id])
  @@index([user_id])
}

// ðŸ”¹ Habit Reminder - For Notification System
model HabitReminder {
  reminder_id          Int            @id @default(autoincrement())
  habit_id             Int
  user_id              Int
  reminder_time        DateTime
  repeat               ReminderRepeat @default(DAILY)
  notification_message String?
  is_enabled           Boolean        @default(true)
  smart_reminder       Boolean        @default(false)
  snooze_count         Int            @default(0)

  // New fields for enhanced notifications
  pre_notification_minutes Int     @default(10) // Minutes before to send reminder
  follow_up_enabled        Boolean @default(true) // Send follow-up if not completed
  follow_up_minutes        Int     @default(30) // Minutes after to send follow-up

  // Relationships
  habit              Habit               @relation(fields: [habit_id], references: [habit_id], onDelete: Cascade)
  user               User                @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  scheduledReminders ScheduledReminder[]
}

enum ReminderRepeat {
  ONCE
  DAILY
  WEEKDAYS
  WEEKENDS
  WEEKLY
  MONTHLY
  CUSTOM
}

// ðŸ”¹ Tracking Type - Enum for Different Habit Tracking Methods
enum TrackingType {
  BOOLEAN
  DURATION
  COUNT
  NUMERIC
}

// ðŸ”¹ Achievement - For Gamification
model Achievement {
  achievement_id Int             @id @default(autoincrement())
  name           String
  description    String
  icon           String
  badge_image    String?
  criteria_type  AchievementType
  criteria_value Int
  xp_value       Int             @default(0)
  points_reward  Int             @default(0) // Points awarded for unlocking
  is_hidden      Boolean         @default(false)

  // Relationships
  userAchievements    UserAchievement[]
  achievementProgress AchievementProgress[]
}

// User-Achievement join table
model UserAchievement {
  user_id        Int
  achievement_id Int
  unlocked_at    DateTime @default(now())
  points_awarded Int      @default(0) // Record points awarded at unlock time

  // Relationships
  user        User        @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievement_id], references: [achievement_id], onDelete: Cascade)

  @@id([user_id, achievement_id])
}

enum AchievementType {
  STREAK_LENGTH
  TOTAL_COMPLETIONS
  CONSECUTIVE_DAYS
  PERFECT_WEEK
  PERFECT_MONTH
  HABIT_DIVERSITY
  DOMAIN_MASTERY
  SOCIAL_ENGAGEMENT
}

// ðŸ”¹ Achievement Progress - Tracks user progress toward achievements
model AchievementProgress {
  id               Int      @id @default(autoincrement())
  user_id          Int
  achievement_id   Int
  current_value    Float    @default(0)
  target_value     Float
  percent_complete Int      @default(0)
  last_updated     DateTime @default(now())
  created_at       DateTime @default(now())

  // Relationships
  user        User        @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievement_id], references: [achievement_id], onDelete: Cascade)

  @@unique([user_id, achievement_id], name: "user_id_achievement_id")
  @@index([user_id])
  @@index([achievement_id])
  @@index([last_updated])
}

// ðŸ”¹ Blog - For Social Sharing and Progress Updates
model Blog {
  blog_id     Int      @id @default(autoincrement())
  user_id     Int
  category_id Int
  title       String
  content     String
  image       String?
  is_featured Boolean  @default(false)
  view_count  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  user     User      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  category Category  @relation(fields: [category_id], references: [category_id])
  likes    Like[]
  comments Comment[]

  @@index([user_id, createdAt])
}

// ðŸ”¹ Category Model - For Organizing Blog Posts
model Category {
  category_id   Int     @id @default(autoincrement())
  category_name String
  icon          String?
  color         String?
  sortOrder     Int     @default(0)

  // Relationships
  blogs Blog[]
}

// ðŸ”¹ Like - For Social Engagement with Blogs
model Like {
  like_id   Int      @id @default(autoincrement())
  user_id   Int
  blog_id   Int
  createdAt DateTime @default(now())

  // Relationships
  user User @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  blog Blog @relation(fields: [blog_id], references: [blog_id], onDelete: Cascade)

  @@unique([user_id, blog_id])
}

// ðŸ”¹ Comment - For Social Interaction on Blogs
model Comment {
  comment_id Int      @id @default(autoincrement())
  user_id    Int
  blog_id    Int
  content    String
  parent_id  Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relationships
  user    User      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  blog    Blog      @relation(fields: [blog_id], references: [blog_id], onDelete: Cascade)
  parent  Comment?  @relation("CommentReplies", fields: [parent_id], references: [comment_id], onDelete: SetNull)
  replies Comment[] @relation("CommentReplies")
}

// ðŸ”¹ Notification - For System Notifications
model Notification {
  notification_id Int              @id @default(autoincrement())
  user_id         Int
  title           String
  content         String
  type            NotificationType
  is_read         Boolean          @default(false)
  createdAt       DateTime         @default(now())
  readAt          DateTime?
  action_url      String?
  related_id      Int?

  // Relationship
  user User @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([user_id, is_read])
  @@index([createdAt])
}

enum NotificationType {
  STREAK_MILESTONE
  ACHIEVEMENT_UNLOCKED
  FRIEND_REQUEST
  CHALLENGE_INVITE
  REMINDER
  SYSTEM_MESSAGE
  BLOG_COMMENT
  NEW_MESSAGE
  GROUP_INVITATION
  POINTS_AWARDED
  CHAT_MESSAGE
}

// ðŸ”¹ HabitReset - Tracks When and Why Streaks Reset
model HabitReset {
  reset_id        Int         @id @default(autoincrement())
  habit_id        Int
  user_id         Int
  reset_date      DateTime    @default(now())
  previous_streak Int
  reason          ResetReason
  user_initiated  Boolean     @default(false)
  notes           String?

  // Relationships
  habit Habit @relation(fields: [habit_id], references: [habit_id], onDelete: Cascade)
  user  User  @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([habit_id])
  @@index([user_id])
}

enum ResetReason {
  MISSED_COMPLETION
  VACATION_ENDED
  HABIT_MODIFIED
  USER_RESET
  SYSTEM_RESET
}

// ðŸ”¹ HabitDailyStatus - Daily Status of Each Habit
model HabitDailyStatus {
  status_id       Int       @id @default(autoincrement())
  habit_id        Int
  user_id         Intcd
  date            DateTime // The specific date this status applies to
  is_scheduled    Boolean   @default(true) // Whether habit was scheduled for this day
  is_completed    Boolean   @default(false) // Whether habit was completed
  is_skipped      Boolean   @default(false) // Whether habit was skipped
  skip_reason     String? // Reason for skipping if applicable
  completion_time DateTime? // When it was completed if at all

  // Relationships
  habit Habit @relation(fields: [habit_id], references: [habit_id], onDelete: Cascade)
  user  User  @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@unique([habit_id, date]) // Only one status per habit per day
  @@index([habit_id, date])
  @@index([user_id, date]) // For querying all habits for a user on a specific day
}

// ðŸ”¹ Challenge - For Group Challenges
model Challenge {
  challenge_id     Int             @id @default(autoincrement())
  title            String
  description      String
  start_date       DateTime
  end_date         DateTime
  created_by       Int
  difficulty       DifficultyLevel @default(MEDIUM)
  is_public        Boolean         @default(true)
  max_participants Int? // Null means unlimited
  points_reward    Int             @default(50)
  badge_image      String?
  created_at       DateTime        @default(now())
  updated_at       DateTime        @updatedAt

  // Challenge requirements
  required_habit_count     Int   @default(1)
  required_completion_rate Float @default(0.8) // 80% completion required

  // Relationships
  creator         User                   @relation("ChallengeCreator", fields: [created_by], references: [user_id], onDelete: Cascade)
  participants    ChallengeParticipant[]
  habitChallenges HabitChallenge[]

  @@index([created_by])
  @@index([start_date, end_date])
  @@index([is_public])
}

// ðŸ”¹ Challenge Participant - Tracks Users in Challenges
model ChallengeParticipant {
  participant_id Int                        @id @default(autoincrement())
  challenge_id   Int
  user_id        Int
  joined_at      DateTime                   @default(now())
  status         ChallengeParticipantStatus @default(ACTIVE)
  progress       Float                      @default(0)
  completed      Boolean                    @default(false)
  completed_at   DateTime?
  points_awarded Int                        @default(0)

  // Relationships
  challenge Challenge @relation(fields: [challenge_id], references: [challenge_id], onDelete: Cascade)
  user      User      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@unique([challenge_id, user_id])
  @@index([user_id])
  @@index([challenge_id])
}

enum ChallengeParticipantStatus {
  INVITED
  ACTIVE
  COMPLETED
  FAILED
  WITHDRAWN
}

// ðŸ”¹ Habit-Challenge Relationship - Links habits to challenges
model HabitChallenge {
  habit_challenge_id Int      @id @default(autoincrement())
  habit_id           Int
  challenge_id       Int
  added_at           DateTime @default(now())

  // Relationships
  habit     Habit     @relation(fields: [habit_id], references: [habit_id], onDelete: Cascade)
  challenge Challenge @relation(fields: [challenge_id], references: [challenge_id], onDelete: Cascade)

  @@unique([habit_id, challenge_id])
  @@index([habit_id])
  @@index([challenge_id])
}

// ðŸ”¹ Leaderboard Cache - For Performance Optimization
model LeaderboardCache {
  id          Int      @id @default(autoincrement())
  period_type String
  period_key  String
  data        Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  expiresAt   DateTime

  @@unique([period_type, period_key])
  @@index([period_type, expiresAt])
}

// ðŸ”¹ App Settings - For Global App Configuration
model AppSettings {
  setting_id    Int      @id @default(autoincrement())
  setting_key   String   @unique
  setting_value String
  description   String?
  is_public     Boolean  @default(false)
  updated_at    DateTime @updatedAt
  updated_by    String?
}

// ðŸ”¹ Motivation Quote - For Inspirational Quotes
model MotivationQuote {
  quote_id   Int      @id @default(autoincrement())
  quote_text String
  author     String?
  category   String?
  is_active  Boolean  @default(true)
  created_at DateTime @default(now())

  @@index([category])
}

// ðŸ”¹ User Stats - For Quick Access to User Statistics
model UserStats {
  stats_id            Int      @id @default(autoincrement())
  user_id             Int      @unique
  daily_completed     Int      @default(0)
  weekly_completed    Int      @default(0)
  monthly_completed   Int      @default(0)
  total_completed     Int      @default(0)
  current_streak      Int      @default(0)
  longest_streak      Int      @default(0)
  perfect_days        Int      @default(0)
  perfect_weeks       Int      @default(0)
  perfect_months      Int      @default(0)
  points_earned_today Int      @default(0)
  points_earned_week  Int      @default(0)
  points_earned_month Int      @default(0)
  points_earned_total Int      @default(0)
  last_active_date    DateTime @default(now())
  updated_at          DateTime @default(now()) @updatedAt

  // Relationship
  user User @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([user_id])
}
